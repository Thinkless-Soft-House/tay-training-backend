name: Docker Image CI

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: Extract SSH Key (REMOVE AFTER USE!)
      #   run: |
      #     echo "=== PRIVATE KEY START ==="
      #     cat /tmp/*/google_compute_engine
      #     echo "=== PRIVATE KEY END ==="
      #     echo ""
      #     echo "=== PUBLIC KEY START ==="
      #     cat /tmp/*/google_compute_engine.pub
      #     echo "=== PUBLIC KEY END ==="
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_IMAGENAME }}:${{ github.ref == 'refs/heads/main' && 'latest' || 'stage' }}
  deploy-on-gcp:
    needs: build-and-push-image # Certifique-se de que o deploy só acontece após o build
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - uses: 'actions/checkout@v4'

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - id: 'hello-world'
        name: 'Test connection'
        uses: google-github-actions/ssh-compute@v1
        with:
          instance_name: ${{ secrets.INSTANCE_NAME }}
          zone: ${{ secrets.ZONE }}
          ssh_private_key: '${{ secrets.GCP_SSH_PRIVATE_KEY }}'
          command: 'echo Hello worlddd'
      - id: 'ssh-compute-refresh-docker-container'
        name: Atualizar Docker Container
        uses: google-github-actions/ssh-compute@v1
        with:
          instance_name: ${{ secrets.INSTANCE_NAME }}
          zone: ${{ secrets.ZONE }}
          ssh_private_key: '${{ secrets.GCP_SSH_PRIVATE_KEY }}'
          command: |
            echo "=== Iniciando atualização do container Docker ==="
            echo "1. Parando container existente (se existir)..."
            docker stop ${{ secrets.CONTAINER_NAME }} || echo "Container não estava rodando ou não existe"
            echo "✓ Container parado"

            echo "2. Removendo container antigo..."
            docker rm ${{ secrets.CONTAINER_NAME }} || echo "Container não existe para remover"
            echo "✓ Container removido"

            echo "3. Limpando recursos não utilizados do Docker para liberar espaço..."
            docker system prune -a || echo "Falha ao limpar, continuando..."
            echo "✓ Limpeza concluída"

            echo "4. Fazendo pull da imagem mais recente..."
            docker pull ${{ secrets.DOCKERHUB_IMAGENAME }}:latest
            echo "✓ Pull da imagem concluído"

            echo "5. Iniciando novo container..."
            docker run -d \
            --name ${{ secrets.CONTAINER_NAME }} \
            -p 3000:3000 \
            -v $(pwd)/app-data:/usr/src/app \
            -v $(pwd)/files_data:/app/files \
            -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            -e POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
            -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            -e TYPEORM_SYNC=${{ secrets.TYPEORM_SYNC }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            ${{ secrets.DOCKERHUB_IMAGENAME }}
            echo "✓ Container iniciado em background"

            echo "6. Verificando se o container está rodando..."
            sleep 5
            docker ps | grep ${{ secrets.CONTAINER_NAME }} || echo "⚠️ Container não encontrado na lista"
            echo "✓ Verificação concluída"

            echo "=== Atualização do container concluída com sucesso ==="
